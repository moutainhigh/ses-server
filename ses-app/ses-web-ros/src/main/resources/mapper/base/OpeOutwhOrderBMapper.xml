<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.redescooter.ses.web.ros.dao.base.OpeOutwhOrderBMapper">
  <resultMap id="BaseResultMap" type="com.redescooter.ses.web.ros.dm.OpeOutwhOrderB">
    <!--@mbg.generated-->
    <!--@Table ope_outwh_order_b-->
    <id column="id" property="id" />
    <result column="dr" property="dr" />
    <result column="outwh_order_id" property="outwhOrderId" />
    <result column="stock_id" property="stockId" />
    <result column="part_product_id" property="partProductId" />
    <result column="product_type" property="productType" />
    <result column="total_count" property="totalCount" />
    <result column="last_out_count" property="lastOutCount" />
    <result column="status" property="status" />
    <result column="created_by" property="createdBy" />
    <result column="created_time" property="createdTime" />
    <result column="updated_by" property="updatedBy" />
    <result column="updated_time" property="updatedTime" />
    <result column="revision" property="revision" />
    <result column="def1" property="def1" />
    <result column="def2" property="def2" />
    <result column="def3" property="def3" />
    <result column="def5" property="def5" />
    <result column="def6" property="def6" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, dr, outwh_order_id, stock_id, part_product_id, product_type, total_count, last_out_count, 
    `status`, created_by, created_time, updated_by, updated_time, revision, def1, def2, 
    def3, def5, def6
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update ope_outwh_order_b
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="dr = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.dr}
        </foreach>
      </trim>
      <trim prefix="outwh_order_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.outwhOrderId}
        </foreach>
      </trim>
      <trim prefix="stock_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.stockId}
        </foreach>
      </trim>
      <trim prefix="part_product_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.partProductId}
        </foreach>
      </trim>
      <trim prefix="product_type = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.productType}
        </foreach>
      </trim>
      <trim prefix="total_count = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.totalCount}
        </foreach>
      </trim>
      <trim prefix="last_out_count = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.lastOutCount}
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.status}
        </foreach>
      </trim>
      <trim prefix="created_by = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.createdBy}
        </foreach>
      </trim>
      <trim prefix="created_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.createdTime}
        </foreach>
      </trim>
      <trim prefix="updated_by = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.updatedBy}
        </foreach>
      </trim>
      <trim prefix="updated_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.updatedTime}
        </foreach>
      </trim>
      <trim prefix="revision = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.revision}
        </foreach>
      </trim>
      <trim prefix="def1 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.def1}
        </foreach>
      </trim>
      <trim prefix="def2 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.def2}
        </foreach>
      </trim>
      <trim prefix="def3 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.def3}
        </foreach>
      </trim>
      <trim prefix="def5 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.def5}
        </foreach>
      </trim>
      <trim prefix="def6 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.def6}
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id}
    </foreach>
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--@mbg.generated-->
    insert into ope_outwh_order_b
    (id, dr, outwh_order_id, stock_id, part_product_id, product_type, total_count, last_out_count, 
      `status`, created_by, created_time, updated_by, updated_time, revision, def1, def2, 
      def3, def5, def6)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id}, #{item.dr}, #{item.outwhOrderId}, #{item.stockId}, #{item.partProductId}, 
        #{item.productType}, #{item.totalCount}, #{item.lastOutCount}, #{item.status}, 
        #{item.createdBy}, #{item.createdTime}, #{item.updatedBy}, #{item.updatedTime}, 
        #{item.revision}, #{item.def1}, #{item.def2}, #{item.def3}, #{item.def5}, #{item.def6}
        )
    </foreach>
  </insert>
  <insert id="insertOrUpdate" parameterType="com.redescooter.ses.web.ros.dm.OpeOutwhOrderB">
    <!--@mbg.generated-->
    insert into ope_outwh_order_b
    (id, dr, outwh_order_id, stock_id, part_product_id, product_type, total_count, last_out_count, 
      `status`, created_by, created_time, updated_by, updated_time, revision, def1, def2, 
      def3, def5, def6)
    values
    (#{id}, #{dr}, #{outwhOrderId}, #{stockId}, #{partProductId}, #{productType}, #{totalCount}, 
      #{lastOutCount}, #{status}, #{createdBy}, #{createdTime}, #{updatedBy}, #{updatedTime}, 
      #{revision}, #{def1}, #{def2}, #{def3}, #{def5}, #{def6})
    on duplicate key update 
    id = #{id}, 
    dr = #{dr}, 
    outwh_order_id = #{outwhOrderId}, 
    stock_id = #{stockId}, 
    part_product_id = #{partProductId}, 
    product_type = #{productType}, 
    total_count = #{totalCount}, 
    last_out_count = #{lastOutCount}, 
    `status` = #{status}, 
    created_by = #{createdBy}, 
    created_time = #{createdTime}, 
    updated_by = #{updatedBy}, 
    updated_time = #{updatedTime}, 
    revision = #{revision}, 
    def1 = #{def1}, 
    def2 = #{def2}, 
    def3 = #{def3}, 
    def5 = #{def5}, 
    def6 = #{def6}
  </insert>
  <insert id="insertOrUpdateSelective" parameterType="com.redescooter.ses.web.ros.dm.OpeOutwhOrderB">
    <!--@mbg.generated-->
    insert into ope_outwh_order_b
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="dr != null">
        dr,
      </if>
      <if test="outwhOrderId != null">
        outwh_order_id,
      </if>
      <if test="stockId != null">
        stock_id,
      </if>
      <if test="partProductId != null">
        part_product_id,
      </if>
      <if test="productType != null">
        product_type,
      </if>
      <if test="totalCount != null">
        total_count,
      </if>
      <if test="lastOutCount != null">
        last_out_count,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="updatedTime != null">
        updated_time,
      </if>
      <if test="revision != null">
        revision,
      </if>
      <if test="def1 != null">
        def1,
      </if>
      <if test="def2 != null">
        def2,
      </if>
      <if test="def3 != null">
        def3,
      </if>
      <if test="def5 != null">
        def5,
      </if>
      <if test="def6 != null">
        def6,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="dr != null">
        #{dr},
      </if>
      <if test="outwhOrderId != null">
        #{outwhOrderId},
      </if>
      <if test="stockId != null">
        #{stockId},
      </if>
      <if test="partProductId != null">
        #{partProductId},
      </if>
      <if test="productType != null">
        #{productType},
      </if>
      <if test="totalCount != null">
        #{totalCount},
      </if>
      <if test="lastOutCount != null">
        #{lastOutCount},
      </if>
      <if test="status != null">
        #{status},
      </if>
      <if test="createdBy != null">
        #{createdBy},
      </if>
      <if test="createdTime != null">
        #{createdTime},
      </if>
      <if test="updatedBy != null">
        #{updatedBy},
      </if>
      <if test="updatedTime != null">
        #{updatedTime},
      </if>
      <if test="revision != null">
        #{revision},
      </if>
      <if test="def1 != null">
        #{def1},
      </if>
      <if test="def2 != null">
        #{def2},
      </if>
      <if test="def3 != null">
        #{def3},
      </if>
      <if test="def5 != null">
        #{def5},
      </if>
      <if test="def6 != null">
        #{def6},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id},
      </if>
      <if test="dr != null">
        dr = #{dr},
      </if>
      <if test="outwhOrderId != null">
        outwh_order_id = #{outwhOrderId},
      </if>
      <if test="stockId != null">
        stock_id = #{stockId},
      </if>
      <if test="partProductId != null">
        part_product_id = #{partProductId},
      </if>
      <if test="productType != null">
        product_type = #{productType},
      </if>
      <if test="totalCount != null">
        total_count = #{totalCount},
      </if>
      <if test="lastOutCount != null">
        last_out_count = #{lastOutCount},
      </if>
      <if test="status != null">
        `status` = #{status},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy},
      </if>
      <if test="updatedTime != null">
        updated_time = #{updatedTime},
      </if>
      <if test="revision != null">
        revision = #{revision},
      </if>
      <if test="def1 != null">
        def1 = #{def1},
      </if>
      <if test="def2 != null">
        def2 = #{def2},
      </if>
      <if test="def3 != null">
        def3 = #{def3},
      </if>
      <if test="def5 != null">
        def5 = #{def5},
      </if>
      <if test="def6 != null">
        def6 = #{def6},
      </if>
    </trim>
  </insert>
</mapper>