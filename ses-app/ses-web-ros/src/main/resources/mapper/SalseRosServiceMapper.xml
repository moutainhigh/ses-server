<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.redescooter.ses.web.ros.dao.bom.SalseRosServiceMapper">

    <sql id="field_product">
       opp.id,
       opp.product_type,
       opp.product_number,
       opp.cn_name,
       opp.fr_name,
       opp.en_name,
       opp.sum_parts_qty,
       opp.model,
       opp.pictures,
       opp.color,
       opp.after_sales_flag,
       opp.added_services_flag,
       opp.note,
       opp.updated_time    as refuseTime,
       orpsf.sales_price   as productFrPrice,
       orpsf.currency_unit as productFrUnit,
       orpse.sales_price   as productEnPrice,
       orpse.currency_unit as productEnUnit
    </sql>
    <sql id="join_productList">
         left join ope_regional_price_sheet orpsf on opp.id = orpsf.parts_product_id and orpsf.currency_type = 'FR' and orpsf.dr=0
         left join ope_regional_price_sheet orpse on opp.id = orpse.parts_product_id and orpse.currency_type = 'EN' and orpse.dr=0
    </sql>
    <sql id="where_productList">
        <where>
            and opp.dr=0
            and opp.product_type in ('2','3','4')
            and opp.user_id=#{userId}
            <if test="type != null and type != ''">
                and opp.product_type =#{type}
            </if>
            <if test="refuseStartTime != null and refuseEndTime != null">
                and opp.updated_time between #{refuseStartTime} and #{refuseEndTime}
            </if>
            <if test="keyword != null and keyword != ''">
                and (
                opp.cn_name like concat('%',#{keyword},'%')
                or opp.fr_name like concat('%',#{keyword},'%')
                or opp.en_name like concat('%',#{keyword},'%')
                or opp.product_number like concat('%',#{keyword},'%')
                )
            </if>
        </where>
    </sql>

    <sql id="where_afterSaleList">
        <where>
            and opp.dr=0
            and opp.user_id=#{userId}
            and opp.after_sales_flag= true
            <if test="type != null and type != ''">
                and opp.product_type =#{type}
            </if>
            <if test="refuseStartTime != null and refuseEndTime != null">
                and opp.updated_time between #{refuseStartTime} and #{refuseEndTime}
            </if>
            <if test="keyword != null and keyword != ''">
                and (
                opp.cn_name like concat('%',#{keyword},'%')
                or opp.fr_name like concat('%',#{keyword},'%')
                or opp.en_name like concat('%',#{keyword},'%')
                or opp.product_number like concat('%',#{keyword},'%')
                )
            </if>
        </where>
    </sql>

    <sql id="where_SccPriceHistroyList">
        select priceResoult.id,
        nullif(sum(priceResoult.enPrice), 0) as productEnPrice,
        nullif(sum(priceResoult.frPrice), 0) as productfrPrice,
        priceResoult.createdTime             as refuseTime
        from (select orpsh.parts_product_id   as id,
        orpsh.sales_price   as enPrice,
        orpsh.currency_type as enCurrencyType,
        orpsh.created_time  as createdTime,
        0                   as frPrice,
        null                as frCurrencyType
        from ope_regional_price_sheet_history orpsh
        where 1 = 1
        and orpsh.parts_product_id = #{id}
        and orpsh.dr = 0
        group by enPrice, enCurrencyType, createdTime, id
        having enCurrencyType = 'EN'
        union all
        select orpsh.parts_product_id   as id,
        0                   as enPrice,
        null                as enCurrencyType,
        orpsh.created_time  as createdTime,
        orpsh.sales_price   as frPrice,
        orpsh.currency_type as frCurrencyType
        from ope_regional_price_sheet_history orpsh
        where 1 = 1
        and orpsh.parts_product_id = #{id}
        and orpsh.dr = 0
        group by frPrice, frCurrencyType, createdTime, id
        having frCurrencyType = 'FR') priceResoult
        group by priceResoult.createdTime, id
    </sql>

    <select id="productListCount" resultType="java.lang.Integer">
        select count(*)
        from ope_parts_product opp
        <include refid="join_productList"/>
        <include refid="where_productList"/>
        order by opp.updated_time desc
    </select>

    <select id="productList" resultType="com.redescooter.ses.web.ros.vo.bom.sales.ProductListResult">
        select
        <include refid="field_product"/>
        from ope_parts_product opp
        <include refid="join_productList"/>
        <include refid="where_productList"/>
        order by opp.updated_time desc
        limit #{startRow},#{pageSize}
    </select>

    <select id="afterSaleListCount" resultType="java.lang.Integer">
        select count(*)
        from ope_parts_product opp
        <include refid="join_productList"/>
        <include refid="where_afterSaleList"/>
    </select>

    <select id="afterSaleList" resultType="com.redescooter.ses.web.ros.vo.bom.sales.ProductListResult">
        select
        <include refid="field_product"/>
        from ope_parts_product opp
        <include refid="join_productList"/>
        <include refid="where_afterSaleList"/>
        order by opp.updated_time desc
        limit #{startRow},#{pageSize}
    </select>

    <select id="productPriceList" resultType="com.redescooter.ses.web.ros.dm.OpeRegionalPriceSheet">
        select *
        from ope_regional_price_sheet sheet
        where sheet.dr = 0
        and sheet.user_id = #{userId}
        and (sheet.assembly_id = #{id} or sheet.part_id =#{id} )
    </select>
    <select id="sccPriceHistroyCount" resultType="java.lang.Integer">
        select count(*)
        from (
        <include refid="where_SccPriceHistroyList"/>
        ) result
    </select>
    <select id="sccPriceHistroyList" resultType="com.redescooter.ses.web.ros.vo.bom.sales.SccPriceResult">
        select *
        from (
        <include refid="where_SccPriceHistroyList"/>
        ) result
        order by refuseTime desc
        limit #{startRow},#{pageSize}
    </select>
</mapper>