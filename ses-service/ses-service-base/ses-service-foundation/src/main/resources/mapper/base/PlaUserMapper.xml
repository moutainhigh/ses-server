<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.redescooter.ses.service.foundation.com.redescooter.ses.service.mobile.c.base.PlaUserMapper">
  <resultMap id="BaseResultMap" type="com.redescooter.ses.service.foundation.dm.base.PlaUser">
    <!--@mbg.generated-->
    <id column="ID" property="id" />
    <result column="dr" property="dr" />
    <result column="TENANT_ID" property="tenantId" />
    <result column="SYSTEM_ID" property="systemId" />
    <result column="LOGIN_NAME" property="loginName" />
    <result column="LOGIN_TYPE" property="loginType" />
    <result column="STATUS" property="status" />
    <result column="USER_TYPE" property="userType" />
    <result column="LAST_LOGIN_TIME" property="lastLoginTime" />
    <result column="LAST_LOGIN_TOKEN" property="lastLoginToken" />
    <result column="CREATED_BY" property="createdBy" />
    <result column="CREATED_TIME" property="createdTime" />
    <result column="UPDATED_BY" property="updatedBy" />
    <result column="UPDATED_TIME" property="updatedTime" />
    <result column="LAST_LOGIN_IP" property="lastLoginIp" />
    <result column="def1" property="def1" />
    <result column="def2" property="def2" />
    <result column="def3" property="def3" />
    <result column="def5" property="def5" />
    <result column="def6" property="def6" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    ID, dr, TENANT_ID, SYSTEM_ID, LOGIN_NAME, LOGIN_TYPE, `STATUS`, USER_TYPE, LAST_LOGIN_TIME, 
    LAST_LOGIN_TOKEN, CREATED_BY, CREATED_TIME, UPDATED_BY, UPDATED_TIME, LAST_LOGIN_IP, 
    def1, def2, def3, def5, def6
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update pla_user
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="dr = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.dr}
        </foreach>
      </trim>
      <trim prefix="TENANT_ID = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.tenantId}
        </foreach>
      </trim>
      <trim prefix="SYSTEM_ID = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.systemId}
        </foreach>
      </trim>
      <trim prefix="LOGIN_NAME = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.loginName}
        </foreach>
      </trim>
      <trim prefix="LOGIN_TYPE = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.loginType}
        </foreach>
      </trim>
      <trim prefix="`STATUS` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.status}
        </foreach>
      </trim>
      <trim prefix="USER_TYPE = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.userType}
        </foreach>
      </trim>
      <trim prefix="LAST_LOGIN_TIME = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.lastLoginTime}
        </foreach>
      </trim>
      <trim prefix="LAST_LOGIN_TOKEN = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.lastLoginToken}
        </foreach>
      </trim>
      <trim prefix="CREATED_BY = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.createdBy}
        </foreach>
      </trim>
      <trim prefix="CREATED_TIME = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.createdTime}
        </foreach>
      </trim>
      <trim prefix="UPDATED_BY = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.updatedBy}
        </foreach>
      </trim>
      <trim prefix="UPDATED_TIME = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.updatedTime}
        </foreach>
      </trim>
      <trim prefix="LAST_LOGIN_IP = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.lastLoginIp}
        </foreach>
      </trim>
      <trim prefix="def1 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.def1}
        </foreach>
      </trim>
      <trim prefix="def2 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.def2}
        </foreach>
      </trim>
      <trim prefix="def3 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.def3}
        </foreach>
      </trim>
      <trim prefix="def5 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.def5}
        </foreach>
      </trim>
      <trim prefix="def6 = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when ID = #{item.id} then #{item.def6}
        </foreach>
      </trim>
    </trim>
    where ID in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id}
    </foreach>
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--@mbg.generated-->
    insert into pla_user
    (ID, dr, TENANT_ID, SYSTEM_ID, LOGIN_NAME, LOGIN_TYPE, `STATUS`, USER_TYPE, LAST_LOGIN_TIME, 
      LAST_LOGIN_TOKEN, CREATED_BY, CREATED_TIME, UPDATED_BY, UPDATED_TIME, LAST_LOGIN_IP, 
      def1, def2, def3, def5, def6)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id}, #{item.dr}, #{item.tenantId}, #{item.systemId}, #{item.loginName}, #{item.loginType}, 
        #{item.status}, #{item.userType}, #{item.lastLoginTime}, #{item.lastLoginToken}, 
        #{item.createdBy}, #{item.createdTime}, #{item.updatedBy}, #{item.updatedTime}, 
        #{item.lastLoginIp}, #{item.def1}, #{item.def2}, #{item.def3}, #{item.def5}, #{item.def6}
        )
    </foreach>
  </insert>
  <insert id="insertOrUpdate" parameterType="com.redescooter.ses.service.foundation.dm.base.PlaUser">
    <!--@mbg.generated-->
    insert into pla_user
    (ID, dr, TENANT_ID, SYSTEM_ID, LOGIN_NAME, LOGIN_TYPE, `STATUS`, USER_TYPE, LAST_LOGIN_TIME, 
      LAST_LOGIN_TOKEN, CREATED_BY, CREATED_TIME, UPDATED_BY, UPDATED_TIME, LAST_LOGIN_IP, 
      def1, def2, def3, def5, def6)
    values
    (#{id}, #{dr}, #{tenantId}, #{systemId}, #{loginName}, #{loginType}, #{status}, #{userType}, 
      #{lastLoginTime}, #{lastLoginToken}, #{createdBy}, #{createdTime}, #{updatedBy}, 
      #{updatedTime}, #{lastLoginIp}, #{def1}, #{def2}, #{def3}, #{def5}, #{def6})
    on duplicate key update 
    ID = #{id}, 
    dr = #{dr}, 
    TENANT_ID = #{tenantId}, 
    SYSTEM_ID = #{systemId}, 
    LOGIN_NAME = #{loginName}, 
    LOGIN_TYPE = #{loginType}, 
    `STATUS` = #{status}, 
    USER_TYPE = #{userType}, 
    LAST_LOGIN_TIME = #{lastLoginTime}, 
    LAST_LOGIN_TOKEN = #{lastLoginToken}, 
    CREATED_BY = #{createdBy}, 
    CREATED_TIME = #{createdTime}, 
    UPDATED_BY = #{updatedBy}, 
    UPDATED_TIME = #{updatedTime}, 
    LAST_LOGIN_IP = #{lastLoginIp}, 
    def1 = #{def1}, 
    def2 = #{def2}, 
    def3 = #{def3}, 
    def5 = #{def5}, 
    def6 = #{def6}
  </insert>
  <insert id="insertOrUpdateSelective" parameterType="com.redescooter.ses.service.foundation.dm.base.PlaUser">
    <!--@mbg.generated-->
    insert into pla_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="dr != null">
        dr,
      </if>
      <if test="tenantId != null">
        TENANT_ID,
      </if>
      <if test="systemId != null">
        SYSTEM_ID,
      </if>
      <if test="loginName != null">
        LOGIN_NAME,
      </if>
      <if test="loginType != null">
        LOGIN_TYPE,
      </if>
      <if test="status != null">
        `STATUS`,
      </if>
      <if test="userType != null">
        USER_TYPE,
      </if>
      <if test="lastLoginTime != null">
        LAST_LOGIN_TIME,
      </if>
      <if test="lastLoginToken != null">
        LAST_LOGIN_TOKEN,
      </if>
      <if test="createdBy != null">
        CREATED_BY,
      </if>
      <if test="createdTime != null">
        CREATED_TIME,
      </if>
      <if test="updatedBy != null">
        UPDATED_BY,
      </if>
      <if test="updatedTime != null">
        UPDATED_TIME,
      </if>
      <if test="lastLoginIp != null">
        LAST_LOGIN_IP,
      </if>
      <if test="def1 != null">
        def1,
      </if>
      <if test="def2 != null">
        def2,
      </if>
      <if test="def3 != null">
        def3,
      </if>
      <if test="def5 != null">
        def5,
      </if>
      <if test="def6 != null">
        def6,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="dr != null">
        #{dr},
      </if>
      <if test="tenantId != null">
        #{tenantId},
      </if>
      <if test="systemId != null">
        #{systemId},
      </if>
      <if test="loginName != null">
        #{loginName},
      </if>
      <if test="loginType != null">
        #{loginType},
      </if>
      <if test="status != null">
        #{status},
      </if>
      <if test="userType != null">
        #{userType},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime},
      </if>
      <if test="lastLoginToken != null">
        #{lastLoginToken},
      </if>
      <if test="createdBy != null">
        #{createdBy},
      </if>
      <if test="createdTime != null">
        #{createdTime},
      </if>
      <if test="updatedBy != null">
        #{updatedBy},
      </if>
      <if test="updatedTime != null">
        #{updatedTime},
      </if>
      <if test="lastLoginIp != null">
        #{lastLoginIp},
      </if>
      <if test="def1 != null">
        #{def1},
      </if>
      <if test="def2 != null">
        #{def2},
      </if>
      <if test="def3 != null">
        #{def3},
      </if>
      <if test="def5 != null">
        #{def5},
      </if>
      <if test="def6 != null">
        #{def6},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        ID = #{id},
      </if>
      <if test="dr != null">
        dr = #{dr},
      </if>
      <if test="tenantId != null">
        TENANT_ID = #{tenantId},
      </if>
      <if test="systemId != null">
        SYSTEM_ID = #{systemId},
      </if>
      <if test="loginName != null">
        LOGIN_NAME = #{loginName},
      </if>
      <if test="loginType != null">
        LOGIN_TYPE = #{loginType},
      </if>
      <if test="status != null">
        `STATUS` = #{status},
      </if>
      <if test="userType != null">
        USER_TYPE = #{userType},
      </if>
      <if test="lastLoginTime != null">
        LAST_LOGIN_TIME = #{lastLoginTime},
      </if>
      <if test="lastLoginToken != null">
        LAST_LOGIN_TOKEN = #{lastLoginToken},
      </if>
      <if test="createdBy != null">
        CREATED_BY = #{createdBy},
      </if>
      <if test="createdTime != null">
        CREATED_TIME = #{createdTime},
      </if>
      <if test="updatedBy != null">
        UPDATED_BY = #{updatedBy},
      </if>
      <if test="updatedTime != null">
        UPDATED_TIME = #{updatedTime},
      </if>
      <if test="lastLoginIp != null">
        LAST_LOGIN_IP = #{lastLoginIp},
      </if>
      <if test="def1 != null">
        def1 = #{def1},
      </if>
      <if test="def2 != null">
        def2 = #{def2},
      </if>
      <if test="def3 != null">
        def3 = #{def3},
      </if>
      <if test="def5 != null">
        def5 = #{def5},
      </if>
      <if test="def6 != null">
        def6 = #{def6},
      </if>
    </trim>
  </insert>
</mapper>